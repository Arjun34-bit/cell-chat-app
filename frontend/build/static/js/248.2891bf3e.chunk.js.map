{"version":3,"file":"static/js/248.2891bf3e.chunk.js","mappings":"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","sources":["componenets/SingleChat.js","componenets/ChatLoading.js","config/ChatLogics.js","componenets/miscelleneous/QRScanner.js","componenets/miscelleneous/Settings.js","componenets/miscelleneous/SideDrawer.js","componenets/UserAvatar/UserBadgeItem.js","componenets/miscelleneous/GroupChatModal.js","componenets/miscelleneous/DeleteButton.js","config/Encryption.js","componenets/MyChats.js","componenets/miscelleneous/UpdateGroupChatModal.js","componenets/ScrollableChat.js","config/TimeLogics.js","componenets/miscelleneous/ScheduleModal.js","componenets/ChatBox.js","Pages/ChatPage.js","componenets/miscelleneous/ProfileModal.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  FormControl,\r\n  IconButton,\r\n  Image,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  Tooltip,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  ArrowLeftIcon,\r\n  ArrowRightIcon,\r\n  AttachmentIcon,\r\n  CalendarIcon,\r\n  InfoIcon,\r\n  InfoOutlineIcon,\r\n  SettingsIcon,\r\n} from \"@chakra-ui/icons\";\r\n// import { FaSmile } from \"react-icons/fa\";\r\nimport {\r\n  getImage,\r\n  getSender,\r\n  getSenderFull,\r\n  getreceiverId,\r\n} from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./miscelleneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscelleneous/UpdateGroupChatModal\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"lottie-react\";\r\nimport animationData from \"../animation/typing.json\";\r\nimport BsEmojiSmileFill, { BsEmojiLaughingFill } from \"react-icons/bs\";\r\nimport Picker, { Emoji } from \"emoji-picker-react\";\r\nimport cellchat from \"../Images/cellchat.jpg\";\r\nimport { truncate } from \"../config/TimeLogics\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport DeleteButton from \"./miscelleneous/DeleteButton\";\r\nimport ScheduleModal from \"./miscelleneous/ScheduleModal\";\r\nimport { encryptMessage } from \"../config/Encryption\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  // const [onlineUsers, setOnlineUsers] = useState([]);\r\n  // const [loggedUser, setLoggedUser] = useState([]);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRation: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const {\r\n    user,\r\n    selectedChat,\r\n    setSelectedChat,\r\n    notification,\r\n    setNotification,\r\n    chat,\r\n  } = ChatState();\r\n\r\n  const handlePickerOpen = () => {\r\n    setShowEmojiPicker(!showEmojiPicker);\r\n  };\r\n\r\n  const emojiValue = (e, emoji) => {\r\n    let msg = newMessage;\r\n    msg += e.emoji;\r\n    setNewMessage(msg);\r\n  };\r\n\r\n  const fetchAllMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\r\n        `/api/messages/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Could not fetch Messages\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io();\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchAllMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message received\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setNewMessage(\"\");\r\n        // const encMsg = encryptMessage(newMessage);\r\n        const { data } = await axios.post(\r\n          \"/api/messages/\",\r\n          { content: newMessage, chatId: selectedChat._id },\r\n          config\r\n        );\r\n\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Could not send Message\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          position: \"bottom\",\r\n          isClosable: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const sendMessageOnClick = async (event) => {\r\n    if (newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/messages/\",\r\n          { content: newMessage, chatId: selectedChat._id },\r\n          config\r\n        );\r\n        console.log(data);\r\n\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Could not send Message\",\r\n          status: \"error\",\r\n          duration: 3000,\r\n          position: \"bottom\",\r\n          isClosable: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n    if (!socketConnected) {\r\n      return;\r\n    }\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  const sendImage = () => {};\r\n\r\n  // const checkOnlineStatus = (c) => {\r\n  //   const chatMember = c.users.find((member) => member !== loggedUser._id);\r\n  //   const online = onlineUsers.find((user) => user.userid === chatMember._id);\r\n  //   console.log(online);\r\n  //   return online ? true : false;\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {/* {chat.map((c) => (\r\n          <MyChats online={checkOnlineStatus(c)} />\r\n      ))} */}\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily={\"Work Sans\"}\r\n            display={\"flex\"}\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems={\"center\"}\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowLeftIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                <Avatar\r\n                  mr={0}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={user.name}\r\n                  src={getImage(user, selectedChat.users)}\r\n                />\r\n                <Text\r\n                  fontSize={{ base: \"20px\", md: \"27px\" }}\r\n                  fontStyle={\"bold\"}\r\n                >\r\n                  {truncate(getSender(user, selectedChat.users))}\r\n                  {/* {getSender(user, selectedChat.users)} */}\r\n                </Text>\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)}>\r\n                  <InfoOutlineIcon size=\"1xl\" marginLeft={\"auto\"} />\r\n                </ProfileModal>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {truncate(selectedChat.chatName.toUpperCase())}\r\n                {/* {selectedChat.chatName.toUpperCase()} */}\r\n                {\r\n                  <UpdateGroupChatModal\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                    fetchMessages={fetchAllMessages}\r\n                  >\r\n                    <InfoOutlineIcon />\r\n                  </UpdateGroupChatModal>\r\n                }\r\n\r\n                <ScheduleModal\r\n                  selectedChat={selectedChat}\r\n                  messages={messages}\r\n                  setMessages={setMessages}\r\n                  setNewMessage={setNewMessage}\r\n                />\r\n              </>\r\n            )}\r\n            <div>\r\n              <Box display={{ base: \"none\", md: \"flex\" }}>\r\n                <DeleteButton\r\n                  loggedUser={user}\r\n                  senderName={getSender(user, selectedChat.users)}\r\n                  id={selectedChat}\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                />\r\n              </Box>\r\n            </div>\r\n          </Text>\r\n          <Box\r\n            display={\"flex\"}\r\n            flexDir={\"column\"}\r\n            justifyContent={\"flex-end\"}\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            // bg=\"black\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius={\"lg\"}\r\n            overflowY={\"hidden\"}\r\n            fontFamily={\"work sans\"}\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n            <Box\r\n              fontFamily={\"work sans\"}\r\n              fontWeight={\"bold\"}\r\n              textAlign={\"center\"}\r\n              color=\"red\"\r\n              variant=\"solid\"\r\n              ml={11}\r\n            >\r\n              {isTyping ? <div>Typing....</div> : <></>}\r\n            </Box>\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              isRequired\r\n              mt={3}\r\n              display={\"flex\"}\r\n            >\r\n              {/* {isTyping ? <div>Loading...</div> : <></>} */}\r\n              <div\r\n                className=\"emoji-picker\"\r\n                style={{ position: \"absolute\", top: \"-450px\" }}\r\n              >\r\n                {showEmojiPicker && <Picker onEmojiClick={emojiValue} />}\r\n              </div>\r\n              <IconButton\r\n                bgColor={\"#E8E8E8\"}\r\n                icon={<BsEmojiLaughingFill color={\"orange\"} size={\"25px\"} />}\r\n                onClick={handlePickerOpen}\r\n              />\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter Message...\"\r\n                onChange={typingHandler}\r\n                value={newMessage}\r\n              />\r\n              <IconButton\r\n                icon={<ArrowRightIcon />}\r\n                onClick={sendMessageOnClick}\r\n              />\r\n              <Tooltip label=\"Image Sending Coming Soon..\">\r\n                <IconButton\r\n                  icon={<AttachmentIcon />}\r\n                  onClick={sendImage}\r\n                  disabled\r\n                />\r\n              </Tooltip>\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems={\"center\"}\r\n          justifyContent={\"center\"}\r\n          h=\"100%\"\r\n        >\r\n          <img\r\n            src={cellchat}\r\n            alt=\"cell-chat\"\r\n            style={{ width: \"250px\", height: \"250px\" }}\r\n          />\r\n          {/* <Text fontSize={\"3xl\"} pb={3} fontFamily={\"Work Sans\"}>\r\n            Click On a User to Start Chat\r\n          </Text> */}\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Skeleton, Stack } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","export const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getreceiverId = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1]._id : users[0]._id;\r\n};\r\n\r\nexport const getreceiverEmail = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].email : users[0].email;\r\n};\r\n\r\nexport const getImage = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].pic : users[0].pic;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst QRScanner = () => {\r\n  const [facing, setFacing] = useState(\"environment\");\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loading, setLoading] = useState(false);\r\n  const { setSelectedChat, chat, setChat, user } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const handleScan = async (data) => {\r\n    if (data) {\r\n      setLoading(true);\r\n      const jsonValue = JSON.parse(data);\r\n      if (user._id === jsonValue) {\r\n        toast({\r\n          title: \"Scanning Self Account\",\r\n          status: \"info\",\r\n          duration: 3000,\r\n          position: \"bottom\",\r\n          isClosable: true,\r\n        });\r\n        return;\r\n      }\r\n      if (user._id !== jsonValue) {\r\n        accessChat(jsonValue);\r\n        onClose();\r\n      }\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n    // const json = JSON.stringify({ userId: userid });\r\n    try {\r\n      // setLoadingChat(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/api/chats\", { userId }, config);\r\n\r\n      if (!chat.find((c) => c._id === data._id)) setChat([data, ...chat]);\r\n\r\n      setSelectedChat(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failure in Fetching the Chat\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom-left\",\r\n        isClosable: true,\r\n      });\r\n      // setLoadingChat(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleError = (err) => {\r\n    console.error(err);\r\n  };\r\n\r\n  const toggleCameraFacing = () => {\r\n    setFacing((prevFacingMode) =>\r\n      prevFacingMode === \"environment\" ? \"user\" : \"environment\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={onOpen}\r\n        w={\"100%\"}\r\n        variant={\"ghost\"}\r\n        display={\"flex\"}\r\n        textAlign=\"left\"\r\n        justifyContent=\"flex-start\"\r\n        paddingLeft={3}\r\n      >\r\n        Scan & Chat\r\n        <sup style={{ color: \"red\", fontSize: \"9px\", padding: \"2px\" }}>NEW</sup>\r\n      </Button>\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Scan QRCode to Chat</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Button\r\n              display={\"flex\"}\r\n              justifyContent={\"center\"}\r\n              onClick={toggleCameraFacing}\r\n              isLoading={loading}\r\n            >\r\n              Change Camera View\r\n            </Button>\r\n            <QrReader\r\n              facingMode={facing}\r\n              delay={300}\r\n              onError={handleError}\r\n              onScan={handleScan}\r\n              style={{ width: \"100%\", padding: \"3px\" }}\r\n            />\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QRScanner;\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  EmailShareButton,\r\n  FacebookShareButton,\r\n  InstapaperShareButton,\r\n  LinkedinShareButton,\r\n  PinterestShareButton,\r\n  TelegramShareButton,\r\n  TwitterShareButton,\r\n  WhatsappShareButton,\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  WhatsappIcon,\r\n  EmailIcon,\r\n  LinkedinIcon,\r\n} from \"react-share\";\r\n\r\nconst Settings = () => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const shareUrl = \"https://cell-chat.onrender.com/\";\r\n  const title = \"Join, Cell-Chat for new xP-rience\";\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={onOpen}\r\n        w={\"100%\"}\r\n        variant={\"ghost\"}\r\n        display={\"flex\"}\r\n        textAlign=\"left\"\r\n        justifyContent=\"flex-start\"\r\n        paddingLeft={3}\r\n      >\r\n        Actions\r\n      </Button>\r\n\r\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Actions</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <h2>Share this page:</h2>\r\n            <FacebookShareButton url={shareUrl} quote={title}>\r\n              <FacebookIcon size={32} round />\r\n            </FacebookShareButton>\r\n            <TwitterShareButton url={shareUrl} title={title}>\r\n              <TwitterIcon size={32} round />\r\n            </TwitterShareButton>\r\n            <LinkedinShareButton url={shareUrl} title={title}>\r\n              <LinkedinIcon size={32} round />\r\n            </LinkedinShareButton>\r\n            <WhatsappShareButton url={shareUrl} title={title}>\r\n              <WhatsappIcon size={32} round />\r\n            </WhatsappShareButton>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme=\"gray\" mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Tooltip,\r\n  Text,\r\n  MenuButton,\r\n  MenuList,\r\n  Menu,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Drawer,\r\n  useDisclosure,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  Input,\r\n  useToast,\r\n  Spinner,\r\n  Badge,\r\n} from \"@chakra-ui/react\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { BellIcon, ChatIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport React, { lazy, Suspense } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { getSender, getreceiverEmail } from \"../../config/ChatLogics\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport QRScanner from \"./QRScanner\";\r\nimport Settings from \"./Settings\";\r\nconst ProfileModal = lazy(() => import(\"./ProfileModal\"));\r\nconst UserListItem = lazy(() => import(\"../UserAvatar/UserListItem\"));\r\n\r\nconst SideDrawer = ({}) => {\r\n  const [search, setSearch] = useState();\r\n  const [searchResult, setSearchResult] = useState();\r\n  const [loading, setLoading] = useState();\r\n  const [loadingChat, setLoadingChat] = useState();\r\n  const [scannedData, setScannedData] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const {\r\n    user,\r\n    setUser,\r\n    selectedChat,\r\n    setSelectedChat,\r\n    chat,\r\n    setChat,\r\n    notification,\r\n    setNotification,\r\n    setLoggedIn,\r\n  } = ChatState();\r\n\r\n  const notifySenderNames = [\"\"];\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    setSelectedChat(\"\");\r\n    setLoggedIn(false);\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please enter Username or Phone\",\r\n        status: \"warning\",\r\n        duration: 3000,\r\n        position: \"top-left\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/users?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failure in Fetching the Users\",\r\n        description: error.response,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"top-left\",\r\n        isClosable: true,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n    // const json = JSON.stringify({ userId: userid });\r\n    try {\r\n      setLoadingChat(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\"/api/chats\", { userId }, config);\r\n\r\n      if (!chat.find((c) => c._id === data._id)) setChat([data, ...chat]);\r\n\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failure in Fetching the Chat\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom-left\",\r\n        isClosable: true,\r\n      });\r\n      setLoadingChat(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // const sendEmailNotify = async (mail, names) => {\r\n  //   try {\r\n  //     const config = {\r\n  //       headers: {\r\n  //         \"Content-type\": \"application/json\",\r\n  //         Authorization: `Bearer ${user.token}`,\r\n  //       },\r\n  //     };\r\n\r\n  //     await axios.put(\"api/notification/\", { mail, names }, config);\r\n  //   } catch (error) {}\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display={\"flex\"}\r\n        justifyContent={\"space-between\"}\r\n        bg={\"green\"}\r\n        padding=\"5px 10px 5px 10px\"\r\n        alignItems={\"center\"}\r\n        width={\"100%\"}\r\n        borderRadius={\"5px\"}\r\n      >\r\n        <Tooltip\r\n          label=\"Search Users to chat\"\r\n          hasArrow\r\n          placement=\"bottom-end\"\r\n          bg=\"blue\"\r\n        >\r\n          <Button variant={\"ghost\"} onClick={onOpen}>\r\n            <i class=\"fas fa-search\"></i>\r\n            <Text display={{ base: \"none\", md: \"flex\" }} px=\"4\">\r\n              {\" \"}\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Box display={\"flex\"} color={\"white\"}>\r\n          <Box>\r\n            <Tooltip label={user.name} textTransform={\"uppercase\"}>\r\n              <ChatIcon marginRight={\"1\"}></ChatIcon>\r\n            </Tooltip>\r\n          </Box>\r\n          <Text\r\n            fontSize={\"2xl\"}\r\n            fontFamily={\"Work Sans\"}\r\n            display={{ base: \"none\", md: \"flex\" }}\r\n          >\r\n            Cell-Chat\r\n            <sub className=\"text\">(ßeta)</sub>\r\n          </Text>\r\n        </Box>\r\n\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={\"1\"}>\r\n              <Badge colorScheme=\"red\">\r\n                {/* <NotificationIcon /> */}\r\n                {notification.length}\r\n              </Badge>\r\n              {/* <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              /> */}\r\n              <BellIcon fontSize=\"2xl\" m={\"1\"}></BellIcon>\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notify) => (\r\n                <MenuItem\r\n                  color={\"black\"}\r\n                  key={notify._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notify.chat);\r\n                    setNotification(notification.filter((n) => n !== notify));\r\n                  }}\r\n                >\r\n                  {notify.chat.isGroupChat\r\n                    ? `New Message in ${notify.chat.chatName}`\r\n                    : `New Message From ${getSender(user, notify.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n              {/* {notification.map((n) =>\r\n                notifySenderNames.push(getSender(user, n.chat.users))\r\n              )}\r\n              {notification\r\n                ? sendEmailNotify(user.email, notifySenderNames)\r\n                : \"\"} */}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n\r\n            <MenuList fontWeight={\"bold\"}>\r\n              <Suspense>\r\n                <ProfileModal user={user}>\r\n                  <MenuItem color={\"black\"} textAlign={\"center\"}>\r\n                    My Profile\r\n                  </MenuItem>\r\n                </ProfileModal>\r\n              </Suspense>\r\n              <MenuDivider />\r\n\r\n              <QRScanner>\r\n                <MenuItem>Scan QR</MenuItem>\r\n              </QRScanner>\r\n              <MenuDivider />\r\n              <Settings>\r\n                <MenuItem>Actions</MenuItem>\r\n              </Settings>\r\n\r\n              <MenuDivider />\r\n              <MenuItem\r\n                color={\"black\"}\r\n                onClick={logoutHandler}\r\n                textAlign={\"center\"}\r\n              >\r\n                LogOut\r\n              </MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box display={\"flex\"} pb={2}>\r\n              <Input\r\n                placeholder=\"Enter Phone or Username\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch} isLoading={loading}>\r\n                Go\r\n              </Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((u) => (\r\n                <Suspense>\r\n                  <UserListItem\r\n                    key={u._id}\r\n                    user={u}\r\n                    handleFunction={() => accessChat(u._id)}\r\n                  />\r\n                </Suspense>\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction }) => {\r\n  return (\r\n    <Box\r\n      px={3}\r\n      py={2}\r\n      borderRadius={\"lg\"}\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      backgroundColor={\"purple\"}\r\n      color=\"white\"\r\n      cursor={\"pointer\"}\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      <CloseIcon pl={1} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { Suspense, lazy, useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nconst UserListItem = lazy(() => import(\"../UserAvatar/UserListItem\"));\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [loading, setLoading] = useState();\r\n  const [search, setSearch] = useState();\r\n  const [searchResults, setSearchResults] = useState();\r\n\r\n  const toast = useToast();\r\n\r\n  const { user, chat, setChat, buttonColor } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/users?search=${search}`, config);\r\n      console.log(data);\r\n      setSearchResults(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"User Not Found\",\r\n        status: \"error\",\r\n        description: error.response.data.message,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n        duration: 3000,\r\n      });\r\n      return;\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Enter Group Name and Select Users\",\r\n        status: \"warning\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/chats/group\",\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((m) => m._id)),\r\n        },\r\n        config\r\n      );\r\n\r\n      setChat([data, ...chat]);\r\n      setLoading(false);\r\n      onClose();\r\n      toast({\r\n        title: \"Group Created\",\r\n        status: \"success\",\r\n        position: \"bottom\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Group Creation Failed\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        position: \"bottom\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n  const handleGroup = (addUser) => {\r\n    if (selectedUsers.includes(addUser)) {\r\n      toast({\r\n        title: \"User already Added\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n    setSelectedUsers([...selectedUsers, addUser]);\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal blockScrollOnMount={false} isOpen={isOpen} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize={\"35px\"}\r\n            fontFamily={\"Work Sans\"}\r\n            display={\"flex\"}\r\n            justifyContent={\"center\"}\r\n          >\r\n            Create a Group\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody display={\"flex\"} flexDir={\"column\"} alignItems={\"center\"}>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Enter Group Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Search Users to add them\"\r\n                mb={3}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <Suspense>\r\n                  <UserBadgeItem\r\n                    key={user._id}\r\n                    user={u}\r\n                    handleFunction={() => handleDelete(u)}\r\n                  />\r\n                </Suspense>\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Processing...</div>\r\n            ) : (\r\n              searchResults\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme={buttonColor} onClick={handleSubmit}>\r\n              Create Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { DeleteIcon, DragHandleIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  IconButton,\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogContent,\r\n  AlertDialogOverlay,\r\n  useDisclosure,\r\n  Button,\r\n  useToast,\r\n  MenuDivider,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { getSender, getSenderFull } from \"../../config/ChatLogics\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ProfileModal from \"./ProfileModal\";\r\n\r\nconst DeleteButton = ({\r\n  senderName,\r\n  id,\r\n  fetchChats,\r\n  openS,\r\n  OnClose,\r\n  setFetchAgain,\r\n  col,\r\n}) => {\r\n  const { user, setSelectedChat, selectedChat } = ChatState();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef();\r\n\r\n  const toast = useToast();\r\n\r\n  const removeChat = async (id) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put(\r\n        \"/api/chats/removechat/\",\r\n        { chatId: id._id },\r\n        config\r\n      );\r\n      toast({\r\n        title: ` Chat Removed`,\r\n        status: \"success\",\r\n        duration: 3000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setSelectedChat(\"\");\r\n      setFetchAgain(true);\r\n      return;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Chat Removal Failed\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    //fetchChats();\r\n  }, [removeChat]);\r\n\r\n  return (\r\n    <Menu color=\"black\">\r\n      <MenuButton\r\n        as={IconButton}\r\n        aria-label=\"Options\"\r\n        icon={<DeleteIcon color={\"black\"} />}\r\n        variant=\"ghost\"\r\n        borderRadius={\"25px\"}\r\n        fontFamily={\"Work Sans\"}\r\n        boxShadow=\"md\"\r\n      ></MenuButton>\r\n      <MenuList color={\"black\"} fontSize={\"20px\"}>\r\n        <MenuDivider />\r\n        <MenuItem icon={<DeleteIcon />} onClick={onOpen}>\r\n          {/* {chat.map((c) => ( */}\r\n          Remove\r\n          {/* ))} */}\r\n        </MenuItem>\r\n      </MenuList>\r\n      <AlertDialog\r\n        isOpen={isOpen}\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n      >\r\n        <AlertDialogOverlay>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n              Remove Chat\r\n            </AlertDialogHeader>\r\n\r\n            <AlertDialogBody>\r\n              Are you sure? You can't undo this action afterwards.\r\n            </AlertDialogBody>\r\n\r\n            <AlertDialogFooter>\r\n              <Button ref={cancelRef} onClick={onClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button colorScheme=\"red\" onClick={() => removeChat(id)} ml={3}>\r\n                Remove\r\n              </Button>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialogOverlay>\r\n      </AlertDialog>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import CryptoJS from \"crypto-js\";\r\n\r\nexport const encryptMessage = (encMsg) => {\r\n  const secretKey = \"julie2017mersal\";\r\n\r\n  const encryptedData = CryptoJS.AES.encrypt(encMsg, secretKey).toString();\r\n\r\n  return encryptedData;\r\n};\r\n\r\nexport const decryptMessage = (decMsg) => {\r\n  const secretKey = \"julie2017mersal\";\r\n\r\n  const decryptedBytes = CryptoJS.AES.decrypt(decMsg, secretKey);\r\n  const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n\r\n  return decryptedData;\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Avatar, Box, Button, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  AddIcon,\r\n  AtSignIcon,\r\n  CloseIcon,\r\n  DeleteIcon,\r\n  SmallAddIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { getImage, getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport GroupChatModal from \"./miscelleneous/GroupChatModal\";\r\nimport DeleteButton from \"./miscelleneous/DeleteButton\";\r\nimport ProfileModal from \"./miscelleneous/ProfileModal\";\r\nimport { decryptMessage } from \"../config/Encryption\";\r\n\r\nconst MyChats = ({ setFetchAgain, fetchAgain, online }) => {\r\n  // window.location.reload(false);\r\n  const [loggedUser, setLoggedUser] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [menuOperation, setMenuOperation] = useState();\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n\r\n  const [showOperations, setShowOperations] = useState(false);\r\n  const { user, selectedChat, setSelectedChat, chat, setChat, buttonColor } =\r\n    ChatState();\r\n\r\n  const touchStartTimestamp = useRef(null);\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chats/\", config);\r\n      setChat(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom-left\",\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n\r\n  //Long Press Functions ---starts\r\n\r\n  let longPressTimeout;\r\n\r\n  // const handleTouchStart = () => {\r\n  //   longPressTimeout = setTimeout(() => {\r\n  //     setShowOperations(true);\r\n  //   }, 1000);\r\n  // };\r\n\r\n  // const handleTouchEnd = () => {\r\n  //   setShowOperations(false);\r\n  //   clearTimeout(longPressTimeout);\r\n  // };\r\n\r\n  const handleTouchStart = () => {\r\n    touchStartTimestamp.current = Date.now();\r\n\r\n    // Start a timeout after 1 second\r\n    setTimeout(() => {\r\n      const touchDuration = Date.now() - touchStartTimestamp.current;\r\n      if (touchDuration >= 1000) {\r\n        setShowOperations(true);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    // Clear the timeout if the touch ends\r\n    clearTimeout();\r\n    touchStartTimestamp.current = null;\r\n\r\n    // Always set showOperations to false when the touch ends\r\n    setShowOperations(false);\r\n  };\r\n\r\n  //Long Press Functions ---ends\r\n  const handleBack = () => {\r\n    setSelectedChat(\"\");\r\n    setShowOperations(false);\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"popstate\", handleBack);\r\n    window.addEventListener(\"backbutton\", handleBack);\r\n    // myElementRef.current.addEventListener(\"touchstart\", handleTouchStart);\r\n    // myElementRef.current.addEventListener(\"touchend\", handleTouchEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"popstate\", handleBack);\r\n      window.removeEventListener(\"backbutton\", handleBack);\r\n      // myElementRef.current.removeEventListener(\"touchstart\", handleTouchStart);\r\n      // myElementRef.current.removeEventListener(\"touchend\", handleTouchEnd);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir={\"column\"}\r\n      alignItems={\"center\"}\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius={\"lg\"}\r\n      borderWidth={\"1px\"}\r\n    >\r\n      {showOperations ? (\r\n        <Box\r\n          display=\"flex\"\r\n          color={\"white\"}\r\n          pb={3}\r\n          px={3}\r\n          fontSize={{ base: \"15px\", md: \"none\" }}\r\n          fontFamily={\"Work Sans\"}\r\n          d=\"flex\"\r\n          w=\"100%\"\r\n          justifyContent={\"space-between\"}\r\n          alignItems={\"center\"}\r\n          className=\"show-operations\"\r\n        >\r\n          <CloseIcon color={\"black\"} onClick={() => setShowOperations(false)} />\r\n          <DeleteButton\r\n            loggedUser={user}\r\n            senderName={getSender(user, menuOperation.users)}\r\n            id={menuOperation}\r\n            fetchAgain={fetchAgain}\r\n            setFetchAgain={setFetchAgain}\r\n          />\r\n        </Box>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          color={\"black\"}\r\n          pb={3}\r\n          px={3}\r\n          fontSize={{ base: \"15px\", md: \"30px\" }}\r\n          fontFamily={\"Work Sans\"}\r\n          d=\"flex\"\r\n          w=\"100%\"\r\n          justifyContent={\"space-between\"}\r\n          alignItems={\"center\"}\r\n          className=\"my-chats\"\r\n        >\r\n          My Chats\r\n          <GroupChatModal>\r\n            <Button\r\n              display=\"flex\"\r\n              fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n              rightIcon={<AddIcon />}\r\n            >\r\n              Create Group\r\n            </Button>\r\n          </GroupChatModal>\r\n        </Box>\r\n      )}\r\n\r\n      {!chat ? (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems={\"center\"}\r\n          justifyContent={\"center\"}\r\n          h=\"100%\"\r\n        >\r\n          <Text\r\n            fontSize={\"2xl\"}\r\n            pb={3}\r\n            fontFamily={\"Work Sans\"}\r\n            color={\"white\"}\r\n          >\r\n            Use Search Button to find friends\r\n          </Text>\r\n        </Box>\r\n      ) : (\r\n        <Box\r\n          d=\"flex\"\r\n          flexDir={\"column\"}\r\n          p={3}\r\n          // bg=\"#F8F8F8\"\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          borderRadius={\"lg\"}\r\n          overflow={\"hidden\"}\r\n          animation={\"ease-in\"}\r\n        >\r\n          {chat ? (\r\n            <Stack overflowY=\"scroll\">\r\n              {chat.map((cha) => (\r\n                <Box\r\n                  fontFamily={\"Work Sans\"}\r\n                  onTouchStart={() => {\r\n                    handleTouchStart();\r\n                    setMenuOperation(cha);\r\n                  }}\r\n                  onTouchEnd={handleTouchEnd}\r\n                  onClick={() => {\r\n                    setSelectedChat(cha);\r\n                  }}\r\n                  cursor={\"pointer\"}\r\n                  bg={selectedChat === cha ? \"#4CAF50\" : \"#E8E8E8\"}\r\n                  color={selectedChat === cha ? \"white\" : \"black\"}\r\n                  px={3}\r\n                  py={2}\r\n                  borderRadius={\"lg\"}\r\n                  key={cha._id}\r\n                >\r\n                  <Text fontSize={{ base: \"18px\", md: \"24px\" }}>\r\n                    <Avatar\r\n                      mr={2}\r\n                      size=\"sm\"\r\n                      cursor=\"pointer\"\r\n                      name={\r\n                        !cha.isGroupChat\r\n                          ? getSender(loggedUser, cha.users)\r\n                          : cha.chatName\r\n                      }\r\n                      src={\r\n                        !cha.isGroupChat\r\n                          ? getImage(loggedUser, cha.users)\r\n                          : cha.pic\r\n                      }\r\n                    />\r\n                    {!cha.isGroupChat\r\n                      ? getSender(loggedUser, cha.users)\r\n                      : cha.chatName}\r\n                  </Text>\r\n                  {cha.latestMessage && (\r\n                    <Text fontSize=\"xs\" paddingLeft={\"8\"}>\r\n                      <b>{cha.latestMessage.sender.name} : </b>\r\n                      {cha.latestMessage.content.length > 50\r\n                        ? decryptMessage(\r\n                            cha.latestMessage.content.substring(0, 51) + \"...\"\r\n                          )\r\n                        : decryptMessage(cha.latestMessage.content)}\r\n                    </Text>\r\n                  )}\r\n                  {!cha.isGroupChat ? (\r\n                    <span color=\"black\">{online ? \"Online\" : \"\"}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          ) : (\r\n            <ChatLoading />\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { Suspense, lazy, useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\r\nimport axios from \"axios\";\r\nconst UserListItem = lazy(() => import(\"../UserAvatar/UserListItem\"));\r\n\r\nconst UpdateGroupChatModal = ({ fetchAgain, setFetchAgain, fetchMessages }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [renameLoading, setRenameLoading] = useState(false);\r\n  const [loading, setLoading] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const handleRemove = async (rmuser) => {\r\n    console.log(selectedChat);\r\n    if (selectedChat.groupAdmin._id !== user._id && rmuser._id !== user._id) {\r\n      toast({\r\n        title: \"Only Admins can remove Members\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put(\r\n        \"/api/chats/groupremove\",\r\n        { chatId: selectedChat._id, userId: rmuser._id },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Member removed\",\r\n        status: \"success\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      rmuser._id === user.id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Member Removal Failed\",\r\n        status: \"error\",\r\n        description: error.message,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n        duration: 3000,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put(\r\n        \"/api/chats/rename\",\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Group Name Updated\",\r\n        status: \"success\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Chat Name Updation Failed\",\r\n        description: error.response,\r\n        status: \"error\",\r\n        duration: 3000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/users?search=${search}`, config);\r\n      setSearchResults(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"User Not Found\",\r\n        status: \"error\",\r\n        description: error.response.data.message,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n        duration: 3000,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleAdd = async (addUser) => {\r\n    //groupAdmin is missing in selectedChat()\r\n    if (selectedChat.users.find((u) => u._id === addUser._id)) {\r\n      toast({\r\n        title: \"User already in the Group\",\r\n        status: \"info\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only Admins can add Members\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.put(\r\n        \"/api/chats/groupadd\",\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: addUser._id,\r\n        },\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Member Added\",\r\n        status: \"success\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n      return;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Member addition failed\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton\r\n        display={{ base: \"flex\" }}\r\n        icon={<ViewIcon />}\r\n        onClick={onOpen}\r\n      />\r\n\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>{selectedChat.chatName}</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Text>Group Members :</Text>\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <Suspense>\r\n                  <UserBadgeItem\r\n                    key={user._id}\r\n                    user={u}\r\n                    handleFunction={() => handleRemove(u)}\r\n                  />\r\n                </Suspense>\r\n              ))}\r\n              {/* {loading ? <div>Removing User...</div> : \"\"} */}\r\n            </Box>\r\n            <FormControl display={\"flex\"}>\r\n              <Input\r\n                placeholder=\"Update Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant={\"solid\"}\r\n                colorScheme=\"green\"\r\n                ml={1}\r\n                isLoading={renameLoading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl display={\"flex\"}>\r\n              <Input\r\n                placeholder=\"Search Users to add them\"\r\n                mb={3}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            {loading ? (\r\n              <div>Processing...</div>\r\n            ) : (\r\n              searchResults\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleAdd(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n\r\n          <ModalFooter\r\n            display={\"flex\"}\r\n            alignItems={\"center\"}\r\n            justifyContent={\"center\"}\r\n          >\r\n            <Button colorScheme=\"red\" mr={3} onClick={() => handleRemove(user)}>\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import React, { useState } from \"react\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip, Box } from \"@chakra-ui/react\";\r\nimport { decryptMessage } from \"../config/Encryption\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const [time, setTime] = useState(\"\");\r\n  const { user } = ChatState();\r\n\r\n  const timeCode = (timestamp) => {\r\n    // const splitTime = timestamp.split(\".\");\r\n    // const time = splitTime[0].split(\"T\");\r\n    // const fTime = time[1].slice(0, 5);\r\n    // return fTime;\r\n\r\n    const utcTime = new Date(timestamp); // Adjust the date and time as needed\r\n\r\n    utcTime.setTime(\r\n      utcTime.getTime() + utcTime.getTimezoneOffset() * 60 * 1000\r\n    );\r\n\r\n    const timeDifference = 5.5 * 60 * 60 * 1000; // 5 hours and 30 minutes in milliseconds\r\n\r\n    const istTime = new Date(utcTime.getTime() + timeDifference);\r\n\r\n    const formattedIstTime = istTime.toLocaleTimeString(\"en-IN\", {\r\n      timeZone: \"Asia/Kolkata\",\r\n    });\r\n\r\n    return formattedIstTime;\r\n  };\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {/* <Box display={\"flex\"} textAlign={\"center\"} justifyContent={\"center\"}>\r\n        <Box\r\n          bgColor={\"blue.500\"}\r\n          mt={1}\r\n          fontSize={{ base: 9, md: 15 }}\r\n          color={\"white\"}\r\n          width={{ base: \"35%\", md: \"45%\" }}\r\n          borderRadius={\"10px\"}\r\n        >\r\n          Hi, Cell &rarr; Encrypted_Text &rarr; Hi, Cell\r\n        </Box>\r\n      </Box> */}\r\n\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m?._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m?.sender.name}\r\n                  src={m?.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m?.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n              }}\r\n            >\r\n              {m.content}\r\n              <sub style={{ paddingLeft: \"4px\", fontSize: \"xs\" }}>\r\n                {timeCode(m?.createdAt)}\r\n              </sub>\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","export const getCurrentTime = () => {\r\n  let date = new Date();\r\n  let h = date.getHours();\r\n  let m = date.getMinutes();\r\n  let s = date.getSeconds();\r\n  let ampm = \"AM\";\r\n\r\n  if (h >= 12) {\r\n    h = h - 12;\r\n    ampm = \"PM\";\r\n  }\r\n\r\n  h = h === 0 ? (h = 12) : h;\r\n\r\n  h = h < 10 ? \"0\" + h : h;\r\n  m = m < 10 ? \"0\" + m : m;\r\n  s = s < 10 ? \"0\" + s : s;\r\n  return `${h}:${m} ${ampm}`;\r\n};\r\n\r\nconst maxLength = 9;\r\nexport const truncate = (name) => {\r\n  if (name.length > maxLength) {\r\n    return name.slice(0, maxLength - 1) + \"...\";\r\n  } else {\r\n    return name;\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n  Text,\r\n  Select,\r\n  Button,\r\n  HStack,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  IconButton,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { CalendarIcon } from \"@chakra-ui/icons\";\r\nimport { getCurrentTime } from \"../../config/TimeLogics\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\n\r\nconst ScheduleModal = ({\r\n  selectedChat,\r\n  messages,\r\n  setNewMessage,\r\n  setMessages,\r\n}) => {\r\n  const [finalTime, setFinalTime] = useState(\"\");\r\n  const [mess, setMess] = useState(\"\");\r\n  const { user, buttonColor } = ChatState();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const toast = useToast();\r\n\r\n  const handleSchedule = async () => {\r\n    // if (!hour || !minute || !states) {\r\n    //   toast({\r\n    //     title: \"Please Schedule your Time appropriatly\",\r\n    //     status: \"error\",\r\n    //     duration: 2000,\r\n    //     position: \"bottom\",\r\n    //     isClosable: true,\r\n    //   });\r\n    //   return;\r\n    // }\r\n    if (!finalTime) {\r\n      toast({\r\n        title: \"Please Schedule your Time appropriatly\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n    if (!mess) {\r\n      toast({\r\n        title: \"Message can't be blank\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only Admin can Schedule Messages\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    } else {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setNewMessage(\"\");\r\n        toast({\r\n          title: `Message Scheduled for ${finalTime}`,\r\n          status: \"success\",\r\n          duration: 2000,\r\n          position: \"bottom\",\r\n          isClosable: true,\r\n        });\r\n        onClose();\r\n        const { data } = await axios.post(\r\n          \"/api/schedule/\",\r\n          { content: mess, chatId: selectedChat._id, timeCode: finalTime },\r\n          config\r\n        );\r\n        setMessages([...messages, data]);\r\n        return;\r\n      } catch (error) {}\r\n      toast({\r\n        title: \"Scheduling Failed\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        position: \"bottom\",\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        as={IconButton}\r\n        aria-label=\"Options\"\r\n        icon={<CalendarIcon />}\r\n        variant=\"ghost\"\r\n        borderRadius={\"25px\"}\r\n        fontFamily={\"Work Sans\"}\r\n        boxShadow=\"md\"\r\n        onClick={onOpen}\r\n      ></Button>\r\n\r\n      <Modal\r\n        blockScrollOnMount={false}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        fontFamily={\"work sans\"}\r\n      >\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Schedule and Send</ModalHeader>\r\n          <span\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              fontSize: \"20px\",\r\n            }}\r\n          >\r\n            Keep Your Wi-Fi or Data connection on\r\n          </span>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <FormControl id=\"msg\" isRequired mt={5}>\r\n              <FormLabel>Select Time (24hrs Format) :</FormLabel>\r\n              <Input\r\n                width={\"100%\"}\r\n                type=\"time\"\r\n                value={finalTime}\r\n                onChange={(e) => setFinalTime(e.target.value)}\r\n              ></Input>\r\n            </FormControl>\r\n            <FormControl id=\"msg\" isRequired mt={5}>\r\n              <FormLabel>Message :</FormLabel>\r\n              <Input\r\n                type=\"text\"\r\n                placeholder=\"Enter Your Message\"\r\n                value={mess}\r\n                onChange={(e) => setMess(e.target.value)}\r\n              ></Input>\r\n            </FormControl>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button\r\n              mt={5}\r\n              variant=\"solid\"\r\n              colorScheme={buttonColor}\r\n              color=\"black\"\r\n              display={\"flex\"}\r\n              justifyContent={\"center\"}\r\n              w={\"100%\"}\r\n              onClick={handleSchedule}\r\n            >\r\n              Schedule\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScheduleModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Box, useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport SingleChat from \"./SingleChat\";\r\n\r\nconst ChatBox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      color={\"black\"}\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import React, { useState } from \"react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Box } from \"@chakra-ui/react\";\r\nimport SideDrawer from \"../componenets/miscelleneous/SideDrawer\";\r\nimport MyChats from \"../componenets/MyChats\";\r\nimport ChatBox from \"../componenets/ChatBox\";\r\n\r\nconst ChatPage = () => {\r\n  const { user } = ChatState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n\r\n  // window.location.reload(false);\r\n  window.history.pushState(null, null, document.URL);\r\n  window.addEventListener(\"popstate\", function () {\r\n    window.history.pushState(null, null, document.URL);\r\n  });\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && (\r\n        <SideDrawer fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n      )}\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent={\"space-between\"}\r\n        width={\"100%\"}\r\n        height={\"91.5vh\"}\r\n        padding={\"10px\"}\r\n        color=\"white\"\r\n      >\r\n        {user && (\r\n          <MyChats fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n        {user && (\r\n          <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  Image,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  ModalOverlay,\r\n  Text,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport QRCode from \"qrcode.react\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [imgorQr, setImgorQr] = useState(false);\r\n  const { loggedUser, buttonColor } = ChatState();\r\n  const jsonString = JSON.stringify(user._id);\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent height={\"410px\"}>\r\n          <ModalHeader\r\n            display=\"flex\"\r\n            fontSize={\"30px\"}\r\n            fontFamily={\"Work Sans\"}\r\n            justifyContent={\"center\"}\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ScrollableFeed>\r\n            <ModalBody\r\n              display=\"flex\"\r\n              flexDir={\"column\"}\r\n              alignItems={\"center\"}\r\n              justifyContent={\"space-between\"}\r\n              h={300}\r\n            >\r\n              {!imgorQr ? (\r\n                <Image\r\n                  borderRadius=\"full\"\r\n                  boxSize=\"150px\"\r\n                  src={user.pic}\r\n                  name={user.name}\r\n                />\r\n              ) : (\r\n                <div className={imgorQr ? \"animate\" : \"\"}>\r\n                  <QRCode value={jsonString} />\r\n                </div>\r\n              )}\r\n\r\n              <Button\r\n                colorScheme={buttonColor}\r\n                mt={2}\r\n                mb={2}\r\n                onClick={() => setImgorQr(!imgorQr)}\r\n              >\r\n                {!imgorQr ? \"Share Profile via QR\" : \" View Profile\"}\r\n              </Button>\r\n\r\n              <Box display=\"flex\" justifyContent={\"space-between\"}>\r\n                <Text\r\n                  fontSize={{ base: \"20px\", md: \"22px\" }}\r\n                  fontFamily=\"Work Sans\"\r\n                >\r\n                  Contact :{user.phone}\r\n                </Text>\r\n                <Text\r\n                  fontSize={{ base: \"20px\", md: \"22px\" }}\r\n                  fontFamily=\"Work Sans\"\r\n                >\r\n                  Email :{user.email}\r\n                </Text>\r\n              </Box>\r\n            </ModalBody>\r\n          </ScrollableFeed>\r\n\r\n          <ModalFooter>\r\n            <Button colorScheme={\"gray\"} mr={3} onClick={onClose}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n"],"names":["socket","selectedChatCompare","_jsxs","Stack","children","_jsx","Skeleton","height","getSender","loggedUser","users","_users$","_id","name","getImage","_users$4","pic","isSameSender","messages","m","i","userId","length","sender","undefined","isLastMessage","isSameSenderMargin","isSameUser","_useState","useState","_useState2","_slicedToArray","facing","setFacing","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","_useState3","_useState4","loading","setLoading","_ChatState","ChatState","setSelectedChat","chat","setChat","user","toast","useToast","handleScan","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","jsonValue","wrap","_context","prev","next","JSON","parse","title","status","duration","position","isClosable","abrupt","accessChat","stop","_x","apply","arguments","_ref2","_callee2","config","_yield$axios$post","_context2","console","log","headers","Authorization","concat","token","axios","sent","find","c","_toConsumableArray","t0","description","response","message","_x2","_Fragment","Button","onClick","w","variant","display","textAlign","justifyContent","paddingLeft","style","color","fontSize","padding","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","prevFacingMode","isLoading","QrReader","facingMode","delay","onError","err","error","onScan","width","ModalFooter","colorScheme","mr","shareUrl","blockScrollOnMount","FacebookShareButton","url","quote","FacebookIcon","size","round","TwitterShareButton","TwitterIcon","LinkedinShareButton","LinkedinIcon","WhatsappShareButton","WhatsappIcon","ProfileModal","lazy","UserListItem","_objectDestructuringEmpty","search","setSearch","searchResult","setSearchResult","_useState5","_useState6","_useState7","_useState8","loadingChat","setLoadingChat","_useState9","_useState10","navigate","useNavigate","setUser","selectedChat","notification","setNotification","setLoggedIn","handleSearch","_yield$axios$get","_ref3","Box","bg","alignItems","borderRadius","Tooltip","label","hasArrow","placement","class","Text","base","md","px","textTransform","ChatIcon","marginRight","fontFamily","className","Menu","MenuButton","p","Badge","BellIcon","MenuList","pl","map","notify","MenuItem","filter","n","isGroupChat","chatName","as","rightIcon","ChevronDownIcon","Avatar","cursor","src","fontWeight","Suspense","MenuDivider","QRScanner","Settings","localStorage","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","pb","Input","placeholder","value","onChange","e","target","ChatLoading","u","handleFunction","Spinner","ml","d","py","mb","backgroundColor","CloseIcon","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","searchResults","setSearchResults","buttonColor","query","handleSubmit","stringify","flexDir","FormControl","flexWrap","UserBadgeItem","delUser","sel","slice","addUser","includes","senderName","id","setFetchAgain","fetchChats","openS","OnClose","col","cancelRef","React","removeChat","_yield$axios$put","chatId","useEffect","IconButton","icon","DeleteIcon","boxShadow","AlertDialog","leastDestructiveRef","AlertDialogOverlay","AlertDialogContent","AlertDialogHeader","AlertDialogBody","AlertDialogFooter","ref","decryptMessage","decMsg","CryptoJS","toString","fetchAgain","online","setLoggedUser","menuOperation","setMenuOperation","showOperations","setShowOperations","touchStartTimestamp","useRef","getItem","handleTouchEnd","clearTimeout","current","handleBack","window","addEventListener","removeEventListener","borderWidth","DeleteButton","GroupChatModal","lg","AddIcon","h","overflow","animation","overflowY","cha","onTouchStart","Date","now","setTimeout","onTouchEnd","latestMessage","content","substring","fetchMessages","renameLoading","setRenameLoading","handleRemove","rmuser","groupAdmin","handleRename","_yield$axios$put2","_ref4","_callee3","_context3","handleAdd","_ref5","_callee4","_yield$axios$put3","_context4","_x3","ViewIcon","isCentered","timeCode","timestamp","utcTime","setTime","getTime","getTimezoneOffset","toLocaleTimeString","timeZone","ScrollableFeed","mt","maxWidth","marginLeft","marginTop","createdAt","truncate","maxLength","setNewMessage","setMessages","finalTime","setFinalTime","mess","setMess","handleSchedule","CalendarIcon","isRequired","FormLabel","type","newMessage","socketConnected","setSocketConnected","typing","setTyping","_useState11","_useState12","isTyping","setIsTyping","_useState13","_useState14","showEmojiPicker","setShowEmojiPicker","fetchAllMessages","emit","io","on","newMessageRecieved","sendMessage","event","key","sendMessageOnClick","_yield$axios$post2","ArrowLeftIcon","toUpperCase","UpdateGroupChatModal","InfoOutlineIcon","ScheduleModal","fontStyle","alignSelf","margin","ScrollableChat","onKeyDown","top","Picker","onEmojiClick","emoji","msg","bgColor","BsEmojiLaughingFill","lastTypingTime","ArrowRightIcon","AttachmentIcon","disabled","cellchat","alt","SingleChat","history","pushState","document","URL","SideDrawer","MyChats","ChatBox","imgorQr","setImgorQr","jsonString","QRCode","Image","boxSize","phone","email"],"sourceRoot":""}